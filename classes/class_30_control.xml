<?xml version="1.0" encoding="utf-8"?>

<class id="30"
    name="Control"
    token="CLASS1.CONTROL" >

    <type id="0"
        name="General event"
        token="VSCP_TYPE_CONTROL_GENERAL" >
    </type>    

    <type  id="1"
        name="Mute on/off"
        token="VSCP_TYPE_CONTROL_MUTE" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }       {{{newline}}}
                    optstr: function() {                            {{{newline}}}
                        if ( e.vscpData[0] )                        {{{newline}}}
                            return &quot;inactivate&quot;;          {{{newline}}}
                        else                                        {{{newline}}}
                            return &quot;activate&quot;;            {{{newline}}}
                     },                                             {{{newline}}}
                    zone: function() { return e.vscpData[1]; }      {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Mute : {{{lbl-end}}} {{{val-start}}}{{{optstr}}} [{{{opt}}}]{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}                    
                    {{{newline}}}
                "
            />
        </render>
    </type>    

    <type  id="2"
        name ="(All) Lamp(s) on/off"
        token="VSCP_TYPE_CONTROL_ALL_LAMPS" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }       {{{newline}}}
                    optstr: function() {                            {{{newline}}}
                        if ( e.vscpData[0] )                        {{{newline}}}
                            return &quot;off&quot;;                 {{{newline}}}
                        else                                        {{{newline}}}
                            return &quot;on&quot;;                  {{{newline}}}
                     },                                             {{{newline}}}
                    zone: function() { return e.vscpData[1]; }      {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                "
                template="
                    {{{lbl-start}}}All lamps : {{{lbl-end}}} {{{val-start}}}{{{optstr}}} [{{{opt}}}]{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}                    
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="3"
        name="Open"
        token="VSCP_TYPE_CONTROL_OPEN" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }    {{{newline}}}
                    subzone: function() { return e.vscpData[2]; } {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}                    
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="4"
        name="Close"
        token="VSCP_TYPE_CONTROL_CLOSE" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }    {{{newline}}}
                    subzone: function() { return e.vscpData[2]; } {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}                    
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="5"
        name="TurnOn"
        token="VSCP_TYPE_CONTROL_TURNON" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}                    
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="6"
        name="TurnOff"
        token="VSCP_TYPE_CONTROL_TURNOFF" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }    {{{newline}}}
                    subzone: function() { return e.vscpData[2]; } {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}                    
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="7"
        name="Start"
        token="VSCP_TYPE_CONTROL_START" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }    {{{newline}}}
                    subzone: function() { return e.vscpData[2]; } {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}                  
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="8"
        name="Stop"
        token="VSCP_TYPE_CONTROL_STOP" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }    {{{newline}}}
                    subzone: function() { return e.vscpData[2]; } {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}                    
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="9"
        name="Reset"
        token="VSCP_TYPE_CONTROL_RESET" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}                    
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="10"
        name="Interrupt"
        token="VSCP_TYPE_CONTROL_INTERRUPT" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Interrupt level : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="11"
        name="Sleep"
        token="VSCP_TYPE_CONTROL_SLEEP" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="12"
        name="Wakeup"
        token="VSCP_TYPE_CONTROL_WAKEUP" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="13"
        name="Resume"
        token="VSCP_TYPE_CONTROL_RESUME" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="14"
        name="Pause"
        token="VSCP_TYPE_CONTROL_PAUSE" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="15"
        name="Activate"
        token="VSCP_TYPE_CONTROL_ACTIVATE" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="16"
        name="Deactivate"
        token="VSCP_TYPE_CONTROL_DEACTIVATE" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="17"
        name="Set all devices off"
        token="VSCP_TYPE_CONTROL_TURN_ALL_OFF" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }   {{{newline}}}
                    zone: function() { return e.vscpData[1]; }    {{{newline}}}
                    subzone: function() { return e.vscpData[2]; } {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="18"
        name="Set all devices on"
        token="VSCP_TYPE_CONTROL_TURN_ALL_ON" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }   {{{newline}}}
                    zone: function() { return e.vscpData[1]; }    {{{newline}}}
                    subzone: function() { return e.vscpData[2]; } {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="19"
        name="Set all device on/off as of argument"
        token="VSCP_TYPE_CONTROL_TURN_ALL_X" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }   {{{newline}}}
                    zone: function() { return e.vscpData[1]; }    {{{newline}}}
                    subzone: function() { return e.vscpData[2]; } {{{newline}}}
                    state: function() { return e.vscpData[3]; } {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}State : {{{lbl-end}}} {{{val-start}}}{{{state}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="20"
        name="Dim lamp(s)"
        token="VSCP_TYPE_CONTROL_DIM_LAMPS" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }    {{{newline}}}
                    subzone: function() { return e.vscpData[2]; } {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Dim lamps : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="21"
        name="Change Channel"
        token="VSCP_TYPE_CONTROL_CHANGE_CHANNEL" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Channel : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="22"
        name="Change Level"
        token="VSCP_TYPE_CONTROL_CHANGE_LEVEL" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Absolute level : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="23"
        name="Relative Change Level"
        token="VSCP_TYPE_CONTROL_RELATIVE_CHANGE_LEVEL" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Relative level : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="24"
        name="Measurement Request"
        token="VSCP_TYPE_CONTROL_MEASUREMENT_REQUEST" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }       {{{newline}}}
                    optstr: function() {                            {{{newline}}}
                        if ( e.vscpData[0] )                        {{{newline}}}
                            return &quot;All&quot;;                 {{{newline}}}
                        else                                        {{{newline}}}
                            return &quot;Specific&quot;;            {{{newline}}}
                     },                                             {{{newline}}}
                    zone: function() { return e.vscpData[1]; }      {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Req. message : {{{lbl-end}}} {{{val-start}}}{{{opt}}} {{{optstr}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="25"
        name="Stream Data"
        token="VSCP_TYPE_CONTROL_STREAM_DATA" >
        <render>
            <vscpworks 
                variables="index: function() { return e.vscpData[0]; }"
                template="
                    {{{lbl-start}}}Sequence number : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>    
    </type>

    <type  id="26"
        name="Sync"
        token="VSCP_TYPE_CONTROL_SYNC" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }    {{{newline}}}
                    subzone: function() { return e.vscpData[2]; } {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>    
    </type>

    <type  id="27"
        name="Zoned Stream Data"
        token="VSCP_TYPE_CONTROL_ZONED_STREAM_DATA" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }       {{{newline}}}    
                    zone: function() { return e.vscpData[1]; },     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                "
                template="        
                    {{{lbl-start}}}Sequence number : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}            
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    Bytes 3-7 is stream data
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="28"
        name="Set Pre-set"
        token="VSCP_TYPE_CONTROL_SET_PRESET" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="                    
                    {{{lbl-start}}}Preset code : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}                    
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="29"
        name="Toggle state"
        token="VSCP_TYPE_CONTROL_TOGGLE_STATE" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template=" 
                    {{{lbl-start}}}Option : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}                   
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="30"
        name="Timed pulse on"
        token="VSCP_TYPE_CONTROL_TIMED_PULSE_ON" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }       {{{newline}}}
                    zone: function() { return e.vscpData[1]; }      {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                    control: function() { return e.vscpData[3]; }   {{{newline}}}
                    timecode: function() { return e.vscpData[3] &amp; 0x07 ; }  {{{newline}}}
                    timecodestr: function() {                                   {{{newline}}}
                        switch (e.vscpData[3] &amp; 0x07) {                     {{{newline}}}
                                                                                {{{newline}}}
                            case 0:                                             {{{newline}}}
                                return &quot;Error: Invalid time code&quot;;    {{{newline}}}
                                                                                {{{newline}}}
                            case 1:                                             {{{newline}}}
                                return &quot;Microseconds&quot;;                {{{newline}}}
                                                                                {{{newline}}}
                            case 2:                                             {{{newline}}}
                                return &quot;Milliseconds&quot;;                {{{newline}}}
                                                                                {{{newline}}}
                            case 3:                                             {{{newline}}}
                                return &quot;Seconds&quot;;                     {{{newline}}}  
                                                                                {{{newline}}}
                            case 4:                                             {{{newline}}}
                                return &quot;Minutes&quot;;                     {{{newline}}}
                                                                                {{{newline}}}
                            case 5:                                             {{{newline}}}
                                return &quot;Hours&quot;;                       {{{newline}}}
                                                                                {{{newline}}}
                            default:                                            {{{newline}}}
                                return &quot;Error: Invalid time code&quot;;    {{{newline}}}
                        } ;                                                     {{{newline}}}
                    }                                                           {{{newline}}}
                    sendon: function() {                                        {{{newline}}}
                        if ( e.vscpData[3] &amp; 0x40 ) {                       {{{newline}}}
                            return &quot;yes&quot;;                             {{{newline}}}
                        }                                                       {{{newline}}}
                        else {                                                  {{{newline}}}
                            return &quot;no&quot;;                              {{{newline}}}
                        }                                                       {{{newline}}}
                    }                                                           {{{newline}}}
                    sendoff: function() {                                       {{{newline}}}
                        if ( e.vscpData[3] &amp; 0x80 ) {                       {{{newline}}}
                            return &quot;yes&quot;;                             {{{newline}}}
                        }                                                       {{{newline}}}
                        else {                                                  {{{newline}}}  
                            return &quot;no&quot;;                              {{{newline}}}
                        }                                                       {{{newline}}}
                    }                                                           {{{newline}}}  
                    time: function() { return (e.vscpData[4] &amp;&amp; 24 +    {{{newline}}}
                                               e.vscpData[5] &amp;&amp; 16 +    {{{newline}}}
                                               e.vscpData[6] &amp;&amp; 8 +     {{{newline}}}
                                               e.vscpData[7] ); }               {{{newline}}}
                "
                template="   
                    {{{lbl-start}}}Opt : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}                 
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Control : {{{lbl-end}}} {{{val-start}}}{{{control}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Send on event : {{{lbl-end}}} {{{val-start}}}{{{sendon}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Send off event : {{{lbl-end}}} {{{val-start}}}{{{sendoff}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Time : {{{lbl-end}}} {{{val-start}}}{{{time}}} {{{timecodestr}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="31"
        name="Timed pulse off"
        token="VSCP_TYPE_CONTROL_TIMED_PULSE_OFF" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }                      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }                     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }                  {{{newline}}}
                    control: function() { return e.vscpData[3]; }                  {{{newline}}}
                    timecode: function() { return e.vscpData[3] &amp; 0x07 ; }     {{{newline}}}
                    timecodestr: function() {                                      {{{newline}}}
                        switch (e.vscpData[3] &amp; 0x07) {                        {{{newline}}}
                                                                                   {{{newline}}}
                            case 0:                                                {{{newline}}}
                                return &quot;Error: Invalid time code&quot;;       {{{newline}}}
                                                                                   {{{newline}}}
                            case 1:                                                {{{newline}}}
                                return &quot;Microseconds&quot;;                   {{{newline}}}
                                                                                   {{{newline}}}
                            case 2:                                                {{{newline}}}
                                return &quot;Milliseconds&quot;;                   {{{newline}}}
                                                                                   {{{newline}}}
                            case 3:                                                {{{newline}}}
                                return &quot;Seconds&quot;;                        {{{newline}}}
                                                                                   {{{newline}}}
                            case 4:                                                {{{newline}}}
                                return &quot;Minutes&quot;;                        {{{newline}}}
                                                                                   {{{newline}}}
                            case 5:                                                {{{newline}}}
                                return &quot;Hours&quot;;                          {{{newline}}}
                                                                                   {{{newline}}}
                            default:                                               {{{newline}}}
                                return &quot;Error: Invalid time code&quot;;       {{{newline}}}
                        } ;                                                        {{{newline}}}
                    }                                                              {{{newline}}}
                    sendon: function() {                                           {{{newline}}}
                        if ( e.vscpData[3] &amp; 0x40 ) {                          {{{newline}}}
                            return &quot;yes&quot;;                                {{{newline}}}
                        }                                                          {{{newline}}}
                        else {                                                     {{{newline}}}
                            return &quot;no&quot;;                                 {{{newline}}}
                        }                                                          {{{newline}}}
                    }                                                              {{{newline}}}
                    sendoff: function() {                                          {{{newline}}}
                        if ( e.vscpData[3] &amp; 0x80 ) {                          {{{newline}}}
                            return &quot;yes&quot;;                                {{{newline}}}
                        }                                                          {{{newline}}}
                        else {                                                     {{{newline}}}
                            return &quot;no&quot;;                                 {{{newline}}}
                        }                                                          {{{newline}}}
                    }                                                              {{{newline}}}
                    time: function() { return (e.vscpData[4] &amp;&amp; 24 +       {{{newline}}}
                                               e.vscpData[5] &amp;&amp; 16 +       {{{newline}}}
                                               e.vscpData[6] &amp;&amp; 8 +        {{{newline}}}
                                               e.vscpData[7] ); }                  {{{newline}}}
                "
                template=" 
                    {{{lbl-start}}}Opt : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}                   
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Control : {{{lbl-end}}} {{{val-start}}}{{{control}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Send on event : {{{lbl-end}}} {{{val-start}}}{{{sendon}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Send off event : {{{lbl-end}}} {{{val-start}}}{{{sendoff}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Time : {{{lbl-end}}} {{{val-start}}}{{{time}}} {{{timecodestr}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="32"
        name="Set country/language"
        token="VSCP_TYPE_CONTROL_SET_COUNTRY_LANGUAGE" >
        <render>
            <vscpworks 
                variables="  
                    country: function() { return e.vscpData[0]; }                     {{{newline}}}
                    countrystr: function() {                                          {{{newline}}}
                        switch(e.vscpData[0]) {                                       {{{newline}}}
                                                                                      {{{newline}}}
                            case 0:                                                   {{{newline}}}
                                return &quot;User defined&quot;;                      {{{newline}}}
                                                                                      {{{newline}}}
                            case 1:                                                   {{{newline}}}
                                return &quot;Error: ISO 639-1&quot;;                  {{{newline}}}
                                                                                      {{{newline}}}
                            case 2:                                                   {{{newline}}}
                                return &quot;Error: ISO 639-1/T&quot;;                {{{newline}}}
                                                                                      {{{newline}}}
                            case 3:                                                   {{{newline}}}
                                return &quot;Error: ISO 639-2/B&quot;;                {{{newline}}}
                                                                                      {{{newline}}}
                            case 4:                                                   {{{newline}}}
                                return &quot;Error: ISO 639-3&quot;;                  {{{newline}}}
                                                                                      {{{newline}}}
                            case 5:                                                   {{{newline}}}
                                return &quot;Error: IETF (RFC-5646/4647)&quot;;       {{{newline}}}           
                                                                                      {{{newline}}}
                            default:                                                  {{{newline}}}
                                return &quot;Error: Undefined language code&quot;;    {{{newline}}}
                        }                                                             {{{newline}}}
                    }                                                                 {{{newline}}}
                    zone: function() { return e.vscpData[1]; }                        {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }                     {{{newline}}}
                "
                template="         
                    {{{lbl-start}}}Country : {{{lbl-end}}} {{{val-start}}}{{{country}}} {{{countrystr}}}{{{val-end}}}{{{newline}}}           
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="33"
        name="Big Change level"
        token="VSCP_TYPE_CONTROL_BIG_CHANGE_LEVEL" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }      {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                    value: function() {                             {{{newline}}}
                        var rval = 0;                               {{{newline}}}
                        for ( i=3;i&lt;e.vscpData.length;i++) {     {{{newline}}}
                            rval = val &lt;&lt; 8;                  {{{newline}}}               
                            rval += e.vscpData[i];                  {{{newline}}}
                        }                                           {{{newline}}}
                        return rval;                                {{{newline}}}
                    }                                               {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Change value : {{{lbl-end}}} {{{val-start}}}{{{value}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="34"
        name="Move (shutter) up"
        token="VSCP_TYPE_CONTROL_SHUTTER_UP" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }      {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="35"
        name="Move (shutter) down"
        token="VSCP_TYPE_CONTROL_SHUTTER_DOWN" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }      {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="36"
        name="Move (shutter) left"
        token="VSCP_TYPE_CONTROL_SHUTTER_LEFT" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }    {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="37"
        name="Move (shutter) right"
        token="VSCP_TYPE_CONTROL_SHUTTER_RIGHT" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }      {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="38"
        name="Move (shutter) to middle position"
        token="VSCP_TYPE_CONTROL_SHUTTER_MIDDLE" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }      {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="39"
        name="Move (shutter) to preset position"
        token="VSCP_TYPE_CONTROL_SHUTTER_PRESET" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }    {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                    pos: function() { return e.vscpData[3]; }      {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Position : {{{lbl-end}}} {{{val-start}}}{{{pos}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="40"
        name="(All) Lamp(s) on"
        token="VSCP_TYPE_CONTROL_ALL_LAMPS_ON" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }    {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="41"
        name="(All) Lamp(s) off"
        token="VSCP_TYPE_CONTROL_ALL_LAMPS_OFF" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }    {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="42"
        name="Lock"
        token="VSCP_TYPE_CONTROL_LOCK" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }    {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="43"
        name="Unlock"
        token="VSCP_TYPE_CONTROL_UNLOCK" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }    {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="44"
        name="PWM set"
        token="VSCP_TYPE_CONTROL_PWM" >
        <render>
            <vscpworks 
                variables="  
                    index: function() { return e.vscpData[0]; }    {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                    control: function() { return e.vscpData[3]; }  {{{newline}}}
                    controlstr: function() {                       {{{newline}}}
                        switch(e.vscpData[3] &amp; 7) {            {{{newline}}}
                                                                   {{{newline}}}
                            case 0:                                {{{newline}}}
                                return &quot;Microseconds&quot;;   {{{newline}}}
                                                                   {{{newline}}}
                            case 1:                                {{{newline}}}
                                return &quot;Milliseconds&quot;;   {{{newline}}}
                                                                   {{{newline}}}
                            case 2:                                {{{newline}}}
                                return &quot;Seconds&quot;;        {{{newline}}}
                                                                   {{{newline}}}
                            case 3:                                {{{newline}}}
                                return &quot;Minutes&quot;;        {{{newline}}}
                                                                   {{{newline}}}
                            case 4:                                {{{newline}}}
                                return &quot;Hours&quot;;          {{{newline}}}
                                                                   {{{newline}}}
                            case 5:                                {{{newline}}}
                                return &quot;Days&quot;;           {{{newline}}}
                                                                   {{{newline}}}
                            default:                               {{{newline}}}
                                return &quot;Error: User defined&quot;;  {{{newline}}}
                        }                                           {{{newline}}}
                                                                    {{{newline}}}
                    }                                               {{{newline}}}
                    time: function() {                              {{{newline}}}
                        return return (e.vscpData[3] &lt;&lt; 24 +  {{{newline}}}
                                       e.vscpData[4] &lt;&lt; 16 +  {{{newline}}}
                                       e.vscpData[5] &lt;&lt; 8 +   {{{newline}}}
                                       e.vscpData[6] );             {{{newline}}}
                    }                                               {{{newline}}}                                               
                "
                template="     
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Control : {{{lbl-end}}} {{{val-start}}}{{{control}}} {{{controlstr}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Time : {{{lbl-end}}} {{{val-start}}}{{{time}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="45"
        name="Lock with token"
        token="VSCP_TYPE_CONTROL_TOKEN_LOCK" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }       {{{newline}}}
                    zone: function() { return e.vscpData[1]; }      {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                    token: function() {                             {{{newline}}}
                        var rval = 0;                               {{{newline}}}
                        for ( i=3;i&lt;e.vscpData.length;i++) {     {{{newline}}}
                            rval = val &lt;&lt; 8;                  {{{newline}}}
                            rval += e.vscpData[i];                  {{{newline}}}
                        }                                           {{{newline}}}
                        return rval;                                {{{newline}}}
                    }                                               {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Opt : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Token : {{{lbl-end}}} {{{val-start}}}{{{token}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="46"
        name="Unlock with token"
        token="VSCP_TYPE_CONTROL_TOKEN_UNLOCK" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                    token: function() {                            {{{newline}}}
                        var rval = 0;                              {{{newline}}}
                        for ( i=3;i&lt;e.vscpData.length;i++) {    {{{newline}}}
                            rval = val &lt;&lt; 8;                 {{{newline}}}
                            rval += e.vscpData[i];                 {{{newline}}}
                        }                                          {{{newline}}}
                        return rval;                               {{{newline}}}
                    }                                              {{{newline}}}
                "                                       
                template="     
                    {{{lbl-start}}}Opt : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Token : {{{lbl-end}}} {{{val-start}}}{{{token}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="47"
        name="Set security level"
        token="VSCP_TYPE_CONTROL_SET_SECURITY_LEVEL" >
        <render>
            <vscpworks 
                variables="  
                    level: function() { return e.vscpData[0]; }     {{{newline}}}
                    zone: function() { return e.vscpData[1]; }      {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Level : {{{lbl-end}}} {{{val-start}}}{{{level}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="48"
        name="Set security pin"
        token="VSCP_TYPE_CONTROL_SET_SECURITY_PIN" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                    pin: function() {                              {{{newline}}}
                        var rval = 0;                              {{{newline}}}
                        for ( i=3;i&lt;e.vscpData.length;i++) {    {{{newline}}}
                            rval = val &lt;&lt; 8;                 {{{newline}}}
                            rval += e.vscpData[i];                 {{{newline}}}
                        }                                          {{{newline}}}
                        return rval;                               {{{newline}}}
                    }                                              {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Opt : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Pin : {{{lbl-end}}} {{{val-start}}}{{{pin}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="49"
        name="Set security password"
        token="VSCP_TYPE_CONTROL_SET_SECURITY_PASSWORD" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }           {{{newline}}}
                    zone: function() { return e.vscpData[1]; }          {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }       {{{newline}}}
                    password: function() {                              {{{newline}}}
                        var rval = &quot;&quot;;                        {{{newline}}}
                        for ( i=3;i&lt;e.vscpData.length;i++) {         {{{newline}}}
                            rval += String.fromCharCode(e.vscpData[i]); {{{newline}}}
                        }                                               {{{newline}}}
                        return rval;                                    {{{newline}}}
                    }                                                   {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Opt : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Password : {{{lbl-end}}} {{{val-start}}}{{{password}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="50"
        name="Set security token"
        token="VSCP_TYPE_CONTROL_SET_SECURITY_TOKEN" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }       {{{newline}}}
                    zone: function() { return e.vscpData[1]; }      {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }   {{{newline}}}
                    token: function() {                             {{{newline}}}
                        var rval = 0;                               {{{newline}}}
                        for ( i=3;i&lt;e.vscpData.length;i++) {     {{{newline}}}
                            rval = val &lt;&lt; 8;                  {{{newline}}}
                            rval += e.vscpData[i];                  {{{newline}}}
                        }                                           {{{newline}}}
                        return rval;                                {{{newline}}}
                    }                                               {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Opt : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Token : {{{lbl-end}}} {{{val-start}}}{{{pin}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

    <type  id="51"
        name="Request new security token"
        token="VSCP_TYPE_CONTROL_REQUEST_SECURITY_TOKEN" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }        {{{newline}}}
                    zone: function() { return e.vscpData[1]; }       {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }    {{{newline}}}
                "
                template="     
                    {{{lbl-start}}}Opt : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>
    
    <type  id="52"
        name="Increment"
        token="VSCP_TYPE_CONTROL_INCREMENT" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                    value: function() {
                        var rval = 0;
                        for ( i=3;i&lt;e.vscpData.length;i++) {
                            rval = val &lt;&lt; 8;
                            rval += e.vscpData[i];
                        }
                        return rval;
                    }
                "
                template="     
                    {{{lbl-start}}}Opt : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Increment value : {{{lbl-end}}} {{{val-start}}}{{{value}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>
    
    <type  id="53"
        name="Decrement"
        token="VSCP_TYPE_CONTROL_DECREMENT" >
        <render>
            <vscpworks 
                variables="  
                    opt: function() { return e.vscpData[0]; }      {{{newline}}}
                    zone: function() { return e.vscpData[1]; }     {{{newline}}}
                    subzone: function() { return e.vscpData[2]; }  {{{newline}}}
                    value: function() {
                        var rval = 0;
                        for ( i=3;i&lt;e.vscpData.length;i++) {
                            rval = val &lt;&lt; 8;
                            rval += e.vscpData[i];
                        }
                        return rval;
                    }
                "
                template="     
                    {{{lbl-start}}}Opt : {{{lbl-end}}} {{{val-start}}}{{{opt}}}{{{val-end}}}{{{newline}}}               
                    {{{lbl-start}}}Zone : {{{lbl-end}}} {{{val-start}}}{{{zone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Subzone : {{{lbl-end}}} {{{val-start}}}{{{subzone}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Decrement value : {{{lbl-end}}} {{{val-start}}}{{{value}}}{{{val-end}}}{{{newline}}}
                    {{{newline}}}
                "
            />
        </render>
    </type>

</class>
