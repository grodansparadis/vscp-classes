<?xml version="1.0" encoding="utf-8"?>

<class id="0" 
    name="VSCP Protocol Functionality" 
    token="CLASS1.PROTOCOL" >

    <type id="0" 
        name="General event." 
        token="VSCP_TYPE_PROTOCOL_GENERAL" >
        <render>
            <vscpworks 
                variables=""
                template="No data"
            />
        </render>
    </type>

    <type id="1" 
        name="Segment Controller Heartbeat." 
        token="VSCP_TYPE_PROTOCOL_SEGCTRL_HEARTBEAT" >
        <render>
            <vscpworks 
                variables="crc8:        function() { return (e.vscpData[0]); }   {{{newline}}}
                           time_epoch:  function() { return (e.vscpData[1]&lt;&lt;24 + e.vscpData[2]&lt;&lt;16 + e.vscpData[3]&lt;&lt;8 + e.vscpData[4]); } {{{newline}}}"
                template="{{{lbl-start}}}CRC8: {{{lbl-end}}} {{{val-start}}}{{{crc8}}}{{{val-end}}}{{{newline}}}
                          {{{lbl-start}}}Time(UTC): {{{lbl-end}}} {{{val-start}}}{{{time_epoch}{{{val-end}}}{{{newline}}}"
            />
        </render> 
    </type>

    <type id="2" 
        name="New node on line / Probe." 
        token="VSCP_TYPE_PROTOCOL_NEW_NODE_ONLINE" >
        <render>
            <vscpworks 
                variables="nickname: function() { return (e.vscpData[0]); }"
                template="{{{lbl-start}}}Target id: {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}"
            />
        </render>
    </type>

    <type id="3" 
        name="Probe ACK." 
        token="VSCP_TYPE_PROTOCOL_PROBE_ACK" >
        <render>
            <vscpworks 
                variables=""
                template="No data"
            />
        </render>
    </type>

    <type id="4" 
        name="Reserved for future use." 
        token="VSCP_TYPE_PROTOCOL_RESERVED4" >
        <render>
            <vscpworks 
                variables=""
                template="No data"
            />
        </render>
    </type>    

    <type id="5"
        name="Reserved for future use."
        token="VSCP_TYPE_PROTOCOL_RESERVED5" >
        <render>
            <vscpworks 
                variables=""
                template="No data"
            />
        </render>
    </type>

    <type id="6"
        name="Set nickname-ID for node." 
        token="VSCP_TYPE_PROTOCOL_SET_NICKNAME" >
        <render>
            <vscpworks 
                variables="old-nickname: function() { return (e.vscpData[0]); } {{{newline}}}
                           new-nickname: function() { return (e.vscpData[1]); } {{{newline}}}"
                template="{{{lbl-start}}}Old id: {{{lbl-end}}} {{{val-start}}}{{{old-nickname}}}{{{val-end}}}{{{newline}}}
                          {{{lbl-start}}}New id(UTC): {{{lbl-end}}} {{{val-start}}}{{{new-nickname}{{{val-end}}}{{{newline}}}"
            />
        </render>
    </type>

    <type id="7"
        name="Nickname-ID accepted."
        token="VSCP_TYPE_PROTOCOL_NICKNAME_ACCEPTED" >
        <render>
            <vscpworks 
                variables=""
                template="No data"
            />
        </render>
    </type>

    <type id="8" 
        name="Drop nickname-ID / Reset Device." 
        token="VSCP_TYPE_PROTOCOL_DROP_NICKNAME" >
        <render>
            <vscpworks 
                variables="nickname: function() { return e.vscpData[0]; }                         {{{newline}}}
                    flags: function() { if (e.vscpData.length>1) return e.vscpData[1]; }          {{{newline}}}
                    time-restart: function() { if (e.vscpData.length>2) return e.vscpData[2]; }   {{{newline}}}
                    flag_reset_keep_nickname: function() { if ( (e.vscpData.length > 2) &amp;&amp; (e.vscpData[2] &amp; 0x20) ) return &quot;Reset device, keep id&quot;; else return &quot;Reset device, nickname discovery&quot; } {{{newline}}}
                    restore-default: function() { if ( (e.vscpData.length > 2) &amp;&amp; (e.vscpData[2] &amp; 0x40) ) return &quot;Set persistent storage to default&quot;; else return &quot;Keep persistent storage&quot;; }      {{{newline}}}
                    go-idle:  function() { if ( (e.vscpData.length > 2) &amp;&amp; (e.vscpData[2] &amp; 0x80) ) return &quot;Go idle. Do not start up again.&quot;; else return &quot;Start normal&quot;; }                          {{{newline}}}
                "
                template="{{{lbl-start}}}Current id: {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                          {{{lbl-start}}}Flags [opt]: {{{lbl-end}}} {{{val-start}}}{{{flags}}}{{{val-end}}}{{{newline}}}
                          {{{ident}}}{{{lbl-start}}}Flag bit 5: {{{val-start}}}{{{lbl-end}}}{{{flag_reset_keep_nickname}}}{{{val-end}}}{{{newline}}}
                          {{{ident}}}{{{lbl-start}}}Flag bit 6: {{{val-start}}}{{{lbl-end}}}{{{restore-default}}}{{{val-end}}}{{{newline}}}
                          {{{ident}}}{{{lbl-start}}}Flag bit 7: {{{val-start}}}{{{lbl-end}}}{{{go-idle}}}{{{val-end}}}{{{newline}}}
                          {{{lbl-start}}}Delay [opt]: {{{lbl-end}}} {{{val-start}}}{{{flags}}}{{{val-end}}} seconds{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="9" 
        name="Read register." 
        token="VSCP_TYPE_PROTOCOL_READ_REGISTER" >
        <render>
            <vscpworks 
                variables="nickname: function() { return e.vscpData[0]; }     {{{newline}}}
                           register: function() { return e.vscpData[1]; }     {{{newline}}}
                "
                template="{{{lbl-start}}}Node id: {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                          {{{lbl-start}}}Register: {{{lbl-end}}} {{{val-start}}}{{{register}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="10" 
        name="Read/Write response." 
        token="VSCP_TYPE_PROTOCOL_RW_RESPONSE" >
        <render>
            <vscpworks 
                variables="
                    register: function() { return e.vscpData[0]; }     {{{newline}}}
                    content: function() { return e.vscpData[1]; }      {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Register: {{{lbl-end}}} {{{val-start}}}{{{register}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Value: {{{lbl-end}}} {{{val-start}}}{{{content}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="11" 
        name="Write register." 
        token="VSCP_TYPE_PROTOCOL_WRITE_REGISTER" >
        <render>
            <vscpworks 
                variables="
                    nickname: function() { return e.vscpData[0]; }    {{{newline}}}
                    register: function() { return e.vscpData[1]; }    {{{newline}}}
                    content: function() { return e.vscpData[2]; }     {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Node id: {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Register: {{{lbl-end}}} {{{val-start}}}{{{register}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Value: {{{lbl-end}}} {{{val-start}}}{{{content}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>    
    </type>

    <type id="12"
        name="Enter boot loader mode." 
        token="VSCP_TYPE_PROTOCOL_ENTER_BOOT_LOADER" >
        <render>
            <vscpworks 
                variables="BASE64:bmlja25hbWU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZS52c2NwRGF0YVswXTsgfQogICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobTogZnVuY3Rpb24oKSB7IHJldHVybiBlLnZzY3BEYXRhWzFdOyB9CiAgICAgICAgICAgICAgICAgICAgZ3VpZDA6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZS52c2NwRGF0YVsyXTsgfQogICAgICAgICAgICAgICAgICAgIGd1aWQzOiBmdW5jdGlvbigpIHsgcmV0dXJuIGUudnNjcERhdGFbM107IH0KICAgICAgICAgICAgICAgICAgICBndWlkNTogZnVuY3Rpb24oKSB7IHJldHVybiBlLnZzY3BEYXRhWzRdOyB9CiAgICAgICAgICAgICAgICAgICAgZ3VpZDc6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZS52c2NwRGF0YVs1XTsgfQogICAgICAgICAgICAgICAgICAgIHBhZ2VzZWxlY3QtbXNiOiBmdW5jdGlvbigpIHsgcmV0dXJuIGUudnNjcERhdGFbNl07IH0KICAgICAgICAgICAgICAgICAgICBwYWdlc2VsZWN0LWxzYjogZnVuY3Rpb24oKSB7IHJldHVybiBlLnZzY3BEYXRhWzddOyB9CiAgICAgICAgICAgICAgICAgICAgcGFnZXNlbGVjdDogZnVuY3Rpb24oKSB7IHJldHVybiAoZS52c2NwRGF0YVs2XSZhbXA7JmFtcDs4ICsgZS52c2NwRGF0YVs3XSk7IH0KICAgICAgICAgICAgICAgICAgICBhbGdvcml0aG0tc3RyOiBmdW5jdGlvbigpIHsgCiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS52c2NwRGF0YVsxXSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMHgwMDogCQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9ICZxdW90O1ZTQ1AgYWxnb3JpdGhtJnF1b3Q7IDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MDE6IAkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSAmcXVvdDtNaWNyb2NoaXAgUElDIGFsZ29yaXRobSZxdW90OyA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAweDEwOiAJCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gJnF1b3Q7QXRtZWwgQVZSIGFsZ29yaXRobSAwJnF1b3Q7IDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MjA6IAkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSAmcXVvdDtOWFAgQVJNIGFsZ29yaXRobSAwJnF1b3Q7IDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDB4MzA6IAkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSAmcXVvdDtTVCBBUk0gYWxnb3JpdGhtIDAmcXVvdDsgOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gJnF1b3Q7VW5rbm93biZxdW90OyA7ICAgCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cjsgfQ=="
                template="
                    {{{lbl-start}}}Node id: {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Algorithm: {{{lbl-end}}} {{{val-start}}}{{{algorithm-str}}} [{{{algorithm}}}]{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}GUID[0]: {{{lbl-end}}} {{{val-start}}}{{{guid0}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}GUID[3]: {{{lbl-end}}} {{{val-start}}}{{{guid3}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}GUID[5]: {{{lbl-end}}} {{{val-start}}}{{{guid5}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}GUID[7]: {{{lbl-end}}} {{{val-start}}}{{{guid7}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Register page: {{{lbl-end}}} {{{val-start}}}{{{pageselect}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="13" 
        name="ACK boot loader mode." 
        token="VSCP_TYPE_PROTOCOL_ACK_BOOT_LOADER" >
        <render>
            <vscpworks 
                variables="BASE64:Zmxhc2gtYmxvY2stc2l6ZTogZnVuY3Rpb24oKSB7IHJldHVybiAoIGUudnNjcERhdGFbMF0mYW1wOyZhbXA7MjQgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnZzY3BEYXRhWzFdJmFtcDsmYW1wOzE2ICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS52c2NwRGF0YVsyXSZhbXA7JmFtcDs4ICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS52c2NwRGF0YVszXSApOyB9CiAgICAgICAgICAgICAgICAgICAgbnVtYmVyLWJsb2NrczogZnVuY3Rpb24oKSB7IHJldHVybiAoICAgIGUudnNjcERhdGFbNF0mYW1wOyZhbXA7MjQgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnZzY3BEYXRhWzVdJmFtcDsmYW1wOzE2ICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS52c2NwRGF0YVs2XSZhbXA7JmFtcDs4ICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS52c2NwRGF0YVs3XSApOyB9"
                template="
                    {{{lbl-start}}}Flash block size: {{{lbl-end}}} {{{val-start}}}{{{flash-block-size}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Available blocks: {{{lbl-end}}} {{{val-start}}}{{{number-blocks}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="14" 
        name="NACK boot loader mode." 
        token="VSCP_TYPE_PROTOCOL_NACK_BOOT_LOADER" >
        <render>
            <vscpworks 
                variables="error: function() { if (e.vscpData.length) return e.vscpData[0]; }"
                template="{{{lbl-start}}}Error [opt]: {{{lbl-end}}} {{{val-start}}}{{{error}}}{{{val-end}}}{{{newline}}}"
            />
        </render>
    </type>

    <type id="15" 
        name="Start block data transfer." 
        token="VSCP_TYPE_PROTOCOL_START_BLOCK" >
        <render>
            <vscpworks 
                variables="BASE64:YmxvY2s6IGZ1bmN0aW9uKCkgeyBpZiAoZS52c2NwRGF0YS5sZW5ndGgpIHJldHVybiAoIGUudnNjcERhdGFbMF0mYW1wOyZhbXA7MjQgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnZzY3BEYXRhWzFdJmFtcDsmYW1wOzE2ICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS52c2NwRGF0YVsyXSZhbXA7JmFtcDs4ICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS52c2NwRGF0YVszXSApOyB9CiAgICAgICAgICAgICAgICAgICAgbWVtdHlwZTogZnVuY3Rpb24oKSB7IGlmIChlLnZzY3BEYXRhLmxlbmd0aD40KSByZXR1cm4gZS52c2NwRGF0YVs0XTsgfQogICAgICAgICAgICAgICAgICAgIGJhbms6IGZ1bmN0aW9uKCkgeyBpZiAoZS52c2NwRGF0YS5sZW5ndGg+NSkgcmV0dXJuIGUudnNjcERhdGFbNV07IH0="
                template="
                    {{{lbl-start}}}Block : {{{lbl-end}}} {{{val-start}}}{{{block}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Memory type [opt]: {{{lbl-end}}} {{{val-start}}}{{{memtype}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Bank [opt]: {{{lbl-end}}} {{{val-start}}}{{{bank}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="16" 
        name="Block data." 
        token="VSCP_TYPE_PROTOCOL_BLOCK_DATA" >
        <render>
            <vscpworks 
                variables="BASE64:ZGF0YTA6IGZ1bmN0aW9uKCkgeyByZXR1cm4gKCBlLnZzY3BEYXRhWzBdICk7IH0KICAgICAgICAgICAgICAgICAgICBkYXRhMTogZnVuY3Rpb24oKSB7IHJldHVybiAoIGUudnNjcERhdGFbMV0gKTsgfQogICAgICAgICAgICAgICAgICAgIGRhdGEyOiBmdW5jdGlvbigpIHsgcmV0dXJuICggZS52c2NwRGF0YVsyXSApOyB9CiAgICAgICAgICAgICAgICAgICAgZGF0YTM6IGZ1bmN0aW9uKCkgeyByZXR1cm4gKCBlLnZzY3BEYXRhWzNdICk7IH0KICAgICAgICAgICAgICAgICAgICBkYXRhNDogZnVuY3Rpb24oKSB7IHJldHVybiAoIGUudnNjcERhdGFbNF0gKTsgfQogICAgICAgICAgICAgICAgICAgIGRhdGE1OiBmdW5jdGlvbigpIHsgcmV0dXJuICggZS52c2NwRGF0YVs1XSApOyB9CiAgICAgICAgICAgICAgICAgICAgZGF0YTY6IGZ1bmN0aW9uKCkgeyByZXR1cm4gKCBlLnZzY3BEYXRhWzZdICk7IH0KICAgICAgICAgICAgICAgICAgICBkYXRhNzogZnVuY3Rpb24oKSB7IHJldHVybiAoIGUudnNjcERhdGFbN10gKTsgfQ=="
                template="{{{lbl-start}}}Data : {{{lbl-end}}} {{{val-start}}}{{{data0}}} {{{data1}}} {{{data2}}} {{{data3}}} {{{data4}}} {{{data5}}} {{{data6}}} {{{data7}}}{{{val-end}}}{{{newline}}}"
            />
        </render>
    </type>

    <type id="17" 
        name="ACK data block." 
        token="VSCP_TYPE_PROTOCOL_BLOCK_DATA_ACK" >
        <render>
            <vscpworks 
                variables="BASE64:Y3JjOiBmdW5jdGlvbigpIHsgcmV0dXJuICggZS52c2NwRGF0YVswXSZhbXA7JmFtcDs4ICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnZzY3BEYXRhWzFdICk7IH0KICAgICAgICAgICAgICAgICAgICB3cml0ZS1wb2ludGVyOiBmdW5jdGlvbigpIHsgcmV0dXJuICggZS52c2NwRGF0YVswXSZhbXA7JmFtcDsyNCArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudnNjcERhdGFbMV0mYW1wOyZhbXA7MTYgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnZzY3BEYXRhWzJdJmFtcDsmYW1wOzggKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnZzY3BEYXRhWzNdICk7IH0="
                template="
                    {{{lbl-start}}}CRC16 : {{{lbl-end}}} {{{val-start}}}{{{crc}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Write pointer: {{{lbl-end}}} {{{val-start}}}{{{write-pointer}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="18" 
        name="NACK data block." 
        token="VSCP_TYPE_PROTOCOL_BLOCK_DATA_NACK" >
        <render>
            <vscpworks 
                variables="BASE64:ZXJyb3I6IGZ1bmN0aW9uKCkgeyByZXR1cm4gKCBlLnZzY3BEYXRhWzBdOyB9ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICB3cml0ZS1wb2ludGVyOiBmdW5jdGlvbigpIHsgcmV0dXJuICggZS52c2NwRGF0YVsxXSZhbXA7JmFtcDsyNCArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudnNjcERhdGFbMl0mYW1wOyZhbXA7MTYgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnZzY3BEYXRhWzNdJmFtcDsmYW1wOzggKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnZzY3BEYXRhWzRdICk7IH0="
                template="
                    {{{lbl-start}}}Error code : {{{lbl-end}}} {{{val-start}}}{{{error}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Write pointer: {{{lbl-end}}} {{{val-start}}}{{{write-pointer}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="19" 
        name="Program data block." 
        token="VSCP_TYPE_PROTOCOL_PROGRAM_BLOCK_DATA" >
        <render>
            <vscpworks 
                variables="BASE64:YmxvY2s6IGZ1bmN0aW9uKCkgeyByZXR1cm4gKCBlLnZzY3BEYXRhWzBdJmFtcDsmYW1wOzI0ICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS52c2NwRGF0YVsxXSZhbXA7JmFtcDsxNiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudnNjcERhdGFbMl0mYW1wOyZhbXA7OCArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudnNjcERhdGFbM10gKTsgfQ=="
                template="{{{lbl-start}}}Block # : {{{lbl-end}}} {{{val-start}}}{{{block}}}{{{val-end}}}{{{newline}}}"
            />
        </render>
    </type>

    <type id="20" 
        name="ACK program data block." 
        token="VSCP_TYPE_PROTOCOL_PROGRAM_BLOCK_DATA_ACK" >
        <render>
            <vscpworks 
                variables="BASE64:YmxvY2s6IGZ1bmN0aW9uKCkgeyByZXR1cm4gKCBlLnZzY3BEYXRhWzBdJmFtcDsmYW1wOzI0ICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS52c2NwRGF0YVsxXSZhbXA7JmFtcDsxNiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudnNjcERhdGFbMl0mYW1wOyZhbXA7OCArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudnNjcERhdGFbM10gKTsgfQ=="
                template="{{{lbl-start}}}Block # : {{{lbl-end}}} {{{val-start}}}{{{block}}}{{{val-end}}}{{{newline}}}"
            />
        </render>
    </type>

    <type id="21" 
        name="NACK program data block." 
        token="VSCP_TYPE_PROTOCOL_PROGRAM_BLOCK_DATA_NACK" >
        <render>
            <vscpworks 
                variables="error: block: function() { return e.vscpData[0]; }         {{{newline}}}
                           block: function() { return ( e.vscpData[1]&amp;&amp;24 +   {{{newline}}}
                                                        e.vscpData[2]&amp;&amp;16 +   {{{newline}}}
                                                        e.vscpData[3]&amp;&amp;8 +    {{{newline}}}
                                                        e.vscpData[4] ); }            {{{newline}}}
                    
                "
                template="
                    {{{lbl-start}}}Error : {{{lbl-end}}} {{{val-start}}}{{{error}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Block # : {{{lbl-end}}} {{{val-start}}}{{{block}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="22" 
        name="Activate new image." 
        token="VSCP_TYPE_PROTOCOL_ACTIVATE_NEW_IMAGE" >
        <render>
            <vscpworks 
                variables="crc: function() { return ( e.vscpData[0]&amp;&amp;8 +   {{{newline}}}
                                                        e.vscpData[1]; }           {{{newline}}}         
                "
                template="{{{lbl-start}}}CRC16 : {{{lbl-end}}} {{{val-start}}}{{{crc}}}{{{val-end}}}{{{newline}}}"
            />
        </render>
    </type>

    <type id="23" 
        name="GUID drop nickname-ID / reset device." 
        token="VSCP_TYPE_PROTOCOL_RESET_DEVICE" >
        <render>
            <vscpworks 
                variables="BASE64:aW5kZXg6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZS52c2NwRGF0YVswXTsgfQogICAgICAgICAgICAgICAgICAgIGd1aWQ0OiBmdW5jdGlvbigpIHsgCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAmcXVvdDsmcXVvdDsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGUudnNjcERhdGFbMF0pICB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9ICZxdW90O0dVSURbMF09JnF1b3Q7ICArICgmcXVvdDswMCZxdW90OyArIGUudnNjcERhdGFbMV0udG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmcXVvdDsgR1VJRFsxXT0mcXVvdDsgKyAoJnF1b3Q7MDAmcXVvdDsgKyBlLnZzY3BEYXRhWzJdLnRvU3RyaW5nKDE2KSkuc3Vic3RyKC0yKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJnF1b3Q7IEdVSURbMl09JnF1b3Q7ICsgKCZxdW90OzAwJnF1b3Q7ICsgZS52c2NwRGF0YVszXS50b1N0cmluZygxNikpLnN1YnN0cigtMikgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZxdW90OyBHVUlEWzNdPSZxdW90OyArICgmcXVvdDswMCZxdW90OyArIGUudnNjcERhdGFbNF0udG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpOyAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gJnF1b3Q7R1VJRFs0XT0mcXVvdDsgICsgKCZxdW90OzAwJnF1b3Q7ICsgZS52c2NwRGF0YVsxXS50b1N0cmluZygxNikpLnN1YnN0cigtMikgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZxdW90OyBHVUlEWzVdPSZxdW90OyArICgmcXVvdDswMCZxdW90OyArIGUudnNjcERhdGFbMl0udG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmcXVvdDsgR1VJRFs2XT0mcXVvdDsgKyAoJnF1b3Q7MDAmcXVvdDsgKyBlLnZzY3BEYXRhWzNdLnRvU3RyaW5nKDE2KSkuc3Vic3RyKC0yKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJnF1b3Q7IEdVSURbN109JnF1b3Q7ICsgKCZxdW90OzAwJnF1b3Q7ICsgZS52c2NwRGF0YVs0XS50b1N0cmluZygxNikpLnN1YnN0cigtMik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9ICZxdW90O0dVSURbOF09JnF1b3Q7ICAgKyAoJnF1b3Q7MDAmcXVvdDsgKyBlLnZzY3BEYXRhWzFdLnRvU3RyaW5nKDE2KSkuc3Vic3RyKC0yKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJnF1b3Q7IEdVSURbOV09JnF1b3Q7ICArICgmcXVvdDswMCZxdW90OyArIGUudnNjcERhdGFbMl0udG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmcXVvdDsgR1VJRFsxMF09JnF1b3Q7ICsgKCZxdW90OzAwJnF1b3Q7ICsgZS52c2NwRGF0YVszXS50b1N0cmluZygxNikpLnN1YnN0cigtMikgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZxdW90OyBHVUlEWzExXT0mcXVvdDsgKyAoJnF1b3Q7MDAmcXVvdDsgKyBlLnZzY3BEYXRhWzRdLnRvU3RyaW5nKDE2KSkuc3Vic3RyKC0yKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gJnF1b3Q7R1VJRFsxMl09JnF1b3Q7ICArICgmcXVvdDswMCZxdW90OyArIGUudnNjcERhdGFbMV0udG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmcXVvdDsgR1VJRFsxM109JnF1b3Q7ICsgKCZxdW90OzAwJnF1b3Q7ICsgZS52c2NwRGF0YVsyXS50b1N0cmluZygxNikpLnN1YnN0cigtMikgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZxdW90OyBHVUlEWzE0XT0mcXVvdDsgKyAoJnF1b3Q7MDAmcXVvdDsgKyBlLnZzY3BEYXRhWzNdLnRvU3RyaW5nKDE2KSkuc3Vic3RyKC0yKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJnF1b3Q7IEdVSURbMTVdPSZxdW90OyArICgmcXVvdDswMCZxdW90OyArIGUudnNjcERhdGFbNF0udG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSAmcXVvdDtJbnZhbGlkIGluZGV4JnF1b3Q7OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOyAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHI7IAogICAgICAgICAgICAgICAgICAgIH0gIA=="
                template="
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}GUID quartet : {{{lbl-end}}} {{{val-start}}}{{{guid4}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="24" 
        name="Page read." 
        token="VSCP_TYPE_PROTOCOL_PAGE_READ" >
        <render>
            <vscpworks 
                variables="  
                    nickname: function() { return e.vscpData[0]; }    {{{newline}}}
                    offset: function() { return e.vscpData[1]; }      {{{newline}}}
                    count: function() { return e.vscpData[2]; }       {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Node id : {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Page offset : {{{lbl-end}}} {{{val-start}}}{{{offset}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Count : {{{lbl-end}}} {{{val-start}}}{{{count}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="25" 
        name="Page write." 
        token="VSCP_TYPE_PROTOCOL_PAGE_WRITE" >
        <render>
            <vscpworks 
                variables="  
                    nickname: function() { return e.vscpData[0]; }    {{{newline}}}
                    offset: function() { return e.vscpData[1]; }      {{{newline}}}
                    data: function() {                                {{{newline}}}
                        var str = &quot;&quot;;                       {{{newline}}}
                        if ( e.vscpData.length > 2 ) str += (&quot;00&quot; + e.vscpData[2].toString(16)).substr(-2);                  {{{newline}}}
                        if ( e.vscpData.length > 3 ) str += &quot; &quot; + e.vscpData[3].toString(16)).substr(-2);                    {{{newline}}}
                        if ( e.vscpData.length > 4 ) str += &quot; &quot; + (&quot;00&quot; + e.vscpData[4].toString(16)).substr(-2);  {{{newline}}}
                        if ( e.vscpData.length > 5 ) str += &quot; &quot; + (&quot;00&quot; + e.vscpData[5].toString(16)).substr(-2);  {{{newline}}}
                        if ( e.vscpData.length > 6 ) str += &quot; &quot; + (&quot;00&quot; + e.vscpData[6].toString(16)).substr(-2);  {{{newline}}}
                        if ( e.vscpData.length > 7 ) str += &quot; &quot; + (&quot;00&quot; + e.vscpData[7].toString(16)).substr(-2);  {{{newline}}}
                        return str; 
                    }
                "
                template="
                    {{{lbl-start}}}Node id : {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Page offset : {{{lbl-end}}} {{{val-start}}}{{{offset}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Data : {{{lbl-end}}} {{{val-start}}}{{{data}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="26" 
        name="Read/Write page response." 
        token="VSCP_TYPE_PROTOCOL_RW_PAGE_RESPONSE" >
        <render>
            <vscpworks 
                variables="  
                    seqno: function() { return e.vscpData[0]; }   {{{newline}}}
                    data: function() {                            {{{newline}}}
                        var str = &quot;&quot;;                   {{{newline}}}
                        if ( e.vscpData.length > 2 ) str += (&quot;00&quot; + e.vscpData[2].toString(16)).substr(-2);                  {{{newline}}}
                        if ( e.vscpData.length > 3 ) str += &quot; &quot; + e.vscpData[3].toString(16)).substr(-2);                    {{{newline}}}
                        if ( e.vscpData.length > 4 ) str += &quot; &quot; + (&quot;00&quot; + e.vscpData[4].toString(16)).substr(-2);  {{{newline}}}
                        if ( e.vscpData.length > 5 ) str += &quot; &quot; + (&quot;00&quot; + e.vscpData[5].toString(16)).substr(-2);  {{{newline}}}
                        if ( e.vscpData.length > 6 ) str += &quot; &quot; + (&quot;00&quot; + e.vscpData[6].toString(16)).substr(-2);  {{{newline}}}
                        if ( e.vscpData.length > 7 ) str += &quot; &quot; + (&quot;00&quot; + e.vscpData[7].toString(16)).substr(-2);  {{{newline}}}
                        return str; 
                    }
                "
                template="
                    {{{lbl-start}}}Sequence no : {{{lbl-end}}} {{{val-start}}}{{{seqno}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Data : {{{lbl-end}}} {{{val-start}}}{{{data}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="27" 
        name="High end server/service probe."
        token="VSCP_TYPE_PROTOCOL_HIGH_END_SERVER_PROBE" >
        <render>
            <vscpworks 
                variables=""
                template="No data"
            />
        </render>
    </type>

    <type id="28" 
        name="High end server/service response." 
        token="VSCP_TYPE_PROTOCOL_HIGH_END_SERVER_RESPONSE" >
        <render>
            <vscpworks variables="
                capability: function() { return ((&quot;0000&quot; + (e.vscpData[0]&amp;&amp;8 +  {{{newline}}}
                                                 e.vscpData[1]).toString(16)).substr(-4) ); },    {{{newline}}}
                ipv4: function() {                                                                {{{newline}}}
                    let str = e.vscpData[2].toString() + &quot;.&quot; +                          {{{newline}}}
                              e.vscpData[3].toString() + &quot;.&quot; +                          {{{newline}}}
                              e.vscpData[4].toString() + &quot;.&quot; +                          {{{newline}}}
                              e.vscpData[5].toString();                                           {{{newline}}}
                    return str; },                                                                {{{newline}}}
                port: function() { return (e.vscpData[6]&amp;&amp;8 +                             {{{newline}}}
                                           e.vscpData[6]); }                                      {{{newline}}}
                "                                                                                 
                template="
                    {{{lbl-start}}}Server caps : {{{lbl-end}}} {{{val-start}}}{{{capability}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}IPv4 : {{{lbl-end}}} {{{val-start}}}{{{ipv4}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Port : {{{lbl-end}}} {{{val-start}}}{{{port}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="29" 
        name="Increment register." 
        token="VSCP_TYPE_PROTOCOL_INCREMENT_REGISTER" >
        <render>
            <vscpworks 
                variables="
                    nickname: function() { return (e.vscpData[0]) };  {{{newline}}}
                    register: function() { return (e.vscpData[1]) };  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Node id : {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Register : {{{lbl-end}}} {{{val-start}}}{{{register}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="30" 
        name="Decrement register." 
        token="VSCP_TYPE_PROTOCOL_DECREMENT_REGISTER" >
        <render>
            <vscpworks 
                variables="
                    nickname: function() { return (e.vscpData[0]) };  {{{newline}}}
                    register: function() { return (e.vscpData[1]) };  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Node id : {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Register : {{{lbl-end}}} {{{val-start}}}{{{register}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="31" 
        name="Who is there?" 
        token="VSCP_TYPE_PROTOCOL_WHO_IS_THERE" >
        <render>
            <vscpworks 
                variables="
                    nickname: function() { return (e.vscpData[0]) };
                "
                template="
                    {{{lbl-start}}}Node id : {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="32" 
        name="Who is there response." 
        token="VSCP_TYPE_PROTOCOL_WHO_IS_THERE_RESPONSE" >
        <render>
            <vscpworks 
                variables="BASE64:aW5kZXg6IGZ1bmN0aW9uKCkgeyByZXR1cm4gKGUudnNjcERhdGFbMF0mYW1wOyZhbXA7OCArIGUudnNjcERhdGFbMV0pIH07CiAgICAgICAgICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24oKSB7IAogICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RyID0gXCJbMF09XCIgICsgKFwiMDBcIiArIGUudnNjcERhdGFbMV0udG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpICsgXCIgJ1wiICsgIFN0cmluZy5mcm9tQ2hhckNvZGUoZS52c2NwRGF0YVsxXSkgKyBcIidcIiA7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnZzY3BEYXRhLWxlbmd0aCA+IDMpIHN0ciArPSBcIiBcIiArIChcIjAwXCIgKyBlLnZzY3BEYXRhWzJdLnRvU3RyaW5nKDE2KSkuc3Vic3RyKC0yKSArIFwiICdcIiArICBTdHJpbmcuZnJvbUNoYXJDb2RlKGUudnNjcERhdGFbMl0pICsgXCInXCIgOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS52c2NwRGF0YS1sZW5ndGggPiA0KSBzdHIgKz0gXCIgXCIgKyAoXCIwMFwiICsgZS52c2NwRGF0YVszXS50b1N0cmluZygxNikpLnN1YnN0cigtMikgKyBcIiAnXCIgKyAgU3RyaW5nLmZyb21DaGFyQ29kZShlLnZzY3BEYXRhWzNdKSArIFwiJ1wiIDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUudnNjcERhdGEtbGVuZ3RoID4gNSkgc3RyICs9IFwiIFwiICsgKFwiMDBcIiArIGUudnNjcERhdGFbNF0udG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpICsgXCIgJ1wiICsgIFN0cmluZy5mcm9tQ2hhckNvZGUoZS52c2NwRGF0YVs0XSkgKyBcIidcIiA7IAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS52c2NwRGF0YS1sZW5ndGggPiA2KSBzdHIgKz0gXCIgXCIgKyAoXCIwMFwiICsgZS52c2NwRGF0YVs1XS50b1N0cmluZygxNikpLnN1YnN0cigtMikgKyBcIiAnXCIgKyAgU3RyaW5nLmZyb21DaGFyQ29kZShlLnZzY3BEYXRhWzVdKSArIFwiJ1wiIDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUudnNjcERhdGEtbGVuZ3RoID4gNykgc3RyICs9IFxcIiBcXCIgKyAoXFwiMDBcXCIgKyBlLnZzY3BEYXRhWzZdLnRvU3RyaW5nKDE2KSkuc3Vic3RyKC0yKSArIFxcIiAnXFwiICsgIFN0cmluZy5mcm9tQ2hhckNvZGUoZS52c2NwRGF0YVs2XSkgKyBcXCInXFwiIDs="
                template="
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Data : {{{lbl-end}}} {{{val-start}}}{{{data}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="33" 
        name="Get decision matrix info." 
        token="VSCP_TYPE_PROTOCOL_GET_MATRIX_INFO" >
        <render>
            <vscpworks 
                variables="
                    nickname: function() { return (e.vscpData[0]) };
                "
                template="
                    {{{lbl-start}}}Node id : {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="34" 
        name="Decision matrix info response." 
        token="VSCP_TYPE_PROTOCOL_GET_MATRIX_INFO_RESPONSE" >
        <render>
            <vscpworks 
                variables="
                    size: function() { return (e.vscpData[0]) };                                   {{{newline}}}
                    offset: function() { return (e.vscpData[1]) };                                 {{{newline}}}
                    page-start: function() { return (e.vscpData[2]&amp;&amp;8 + e.vscpData[3]) };  {{{newline}}}
                    row-size: function() { return (e.vscpData[6]) };
                "
                template="
                    {{{lbl-start}}}Size : {{{lbl-end}}} {{{val-start}}}{{{size}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Offset : {{{lbl-end}}} {{{val-start}}}{{{offset}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Page start [opt] : {{{lbl-end}}} {{{val-start}}}{{{page-start}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}LII Row size [opt] : {{{lbl-end}}} {{{val-start}}}{{{row-size}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="35" 
        name="Get embedded MDF." 
        token="VSCP_TYPE_PROTOCOL_GET_EMBEDDED_MDF" >
        <render>
            <vscpworks 
                variables="
                    nickname: function() { return (e.vscpData[0]) };
                "
                template="
                    {{{lbl-start}}}Node id : {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="36" 
        name="Embedded MDF response." 
        token="VSCP_TYPE_PROTOCOL_GET_EMBEDDED_MDF_RESPONSE" >
        <render>
            <vscpworks 
                variables="BASE64:aW5kZXg6IGZ1bmN0aW9uKCkgeyByZXR1cm4gKGUudnNjcERhdGFbMF0mYW1wOyZhbXA7OCArIGUudnNjcERhdGFbMV0pIH07CiAgICAgICAgICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24oKSB7IAogICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RyID0gXCJbMF09XCIgICsgKFwiMDBcIiArIGUudnNjcERhdGFbMV0udG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpICsgXCIgJ1wiICsgIFN0cmluZy5mcm9tQ2hhckNvZGUoZS52c2NwRGF0YVsxXSkgKyBcIidcIiA7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnZzY3BEYXRhLWxlbmd0aCA+IDMpIHN0ciArPSBcIiBcIiArIChcIjAwXCIgKyBlLnZzY3BEYXRhWzJdLnRvU3RyaW5nKDE2KSkuc3Vic3RyKC0yKSArIFwiICdcIiArICBTdHJpbmcuZnJvbUNoYXJDb2RlKGUudnNjcERhdGFbMl0pICsgXCInXCIgOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS52c2NwRGF0YS1sZW5ndGggPiA0KSBzdHIgKz0gXCIgXCIgKyAoXCIwMFwiICsgZS52c2NwRGF0YVszXS50b1N0cmluZygxNikpLnN1YnN0cigtMikgKyBcIiAnXCIgKyAgU3RyaW5nLmZyb21DaGFyQ29kZShlLnZzY3BEYXRhWzNdKSArIFwiJ1wiIDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUudnNjcERhdGEtbGVuZ3RoID4gNSkgc3RyICs9IFwiIFwiICsgKFwiMDBcIiArIGUudnNjcERhdGFbNF0udG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpICsgXCIgJ1wiICsgIFN0cmluZy5mcm9tQ2hhckNvZGUoZS52c2NwRGF0YVs0XSkgKyBcIidcIiA7IAogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS52c2NwRGF0YS1sZW5ndGggPiA2KSBzdHIgKz0gXCIgXCIgKyAoXCIwMFwiICsgZS52c2NwRGF0YVs1XS50b1N0cmluZygxNikpLnN1YnN0cigtMikgKyBcIiAnXCIgKyAgU3RyaW5nLmZyb21DaGFyQ29kZShlLnZzY3BEYXRhWzVdKSArIFwiJ1wiIDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUudnNjcERhdGEtbGVuZ3RoID4gNykgc3RyICs9IFwiIFwiICsgKFwiMDBcIiArIGUudnNjcERhdGFbNl0udG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpICsgXCIgJ1wiICsgIFN0cmluZy5mcm9tQ2hhckNvZGUoZS52c2NwRGF0YVs2XSkgKyBcIidcIiA7"
                template="
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Data : {{{lbl-end}}} {{{val-start}}}{{{data}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="37" 
        name="Extended page read register." 
        token="VSCP_TYPE_PROTOCOL_EXTENDED_PAGE_READ" >
        <render>
            <vscpworks 
                variables="
                    nickname: function() { return e.vscpData[0]) };                                          {{{newline}}}
                    page: function() { return (e.vscpData[1]&amp;&amp;8 + e.vscpData[2]) };                  {{{newline}}}
                    register: function() { return e.vscpData[3]) };                                          {{{newline}}}
                    count: function() { if (e.vscpData[3].length>3) return e.vscpData[4]) else return 1; };  {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Node id : {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Page : {{{lbl-end}}} {{{val-start}}}{{{page}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Register : {{{lbl-end}}} {{{val-start}}}{{{register}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Count : {{{lbl-end}}} {{{val-start}}}{{{count}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="38" 
        name="Extended page write register." 
        token="VSCP_TYPE_PROTOCOL_EXTENDED_PAGE_WRITE" >
        <render>
            <vscpworks 
                variables="
                    nickname: function() { return e.vscpData[0]) };                          {{{newline}}}
                    page: function() { return (e.vscpData[1]&amp;&amp;8 + e.vscpData[2]) };  {{{newline}}}
                    register: function() { return e.vscpData[3]) };                          {{{newline}}}
                    content: function() { return e.vscpData[4]) };                           {{{newline}}}
                    content1: function() { (e.vscpData[5].length>4) return e.vscpData[5]) }; {{{newline}}}
                    content2: function() { (e.vscpData[6].length>5) return e.vscpData[6]) }; {{{newline}}}
                    content3: function() { (e.vscpData[7].length>6) return e.vscpData[7]) }; {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Node id : {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Page : {{{lbl-end}}} {{{val-start}}}{{{page}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Register : {{{lbl-end}}} {{{val-start}}}{{{register}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Count : {{{lbl-end}}} {{{val-start}}}{{{count}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="39" 
        name="Extended page read/write response." 
        token="VSCP_TYPE_PROTOCOL_EXTENDED_PAGE_RESPONSE" >
        <render>
            <vscpworks 
                variables="
                    nickname: function() { return e.vscpData[0]) };                          {{{newline}}}
                    page: function() { return (e.vscpData[1]&amp;&amp;8 + e.vscpData[2]) };  {{{newline}}}
                    register: function() { return e.vscpData[3]) };                          {{{newline}}}
                    content: function() { return e.vscpData[4]) };                           {{{newline}}}
                    content1: function() { (e.vscpData[5].length>4) return e.vscpData[5]) }; {{{newline}}}
                    content2: function() { (e.vscpData[6].length>5) return e.vscpData[6]) }; {{{newline}}}
                    content3: function() { (e.vscpData[7].length>6) return e.vscpData[7]) }; {{{newline}}}
                "
                template="
                    {{{lbl-start}}}Node id : {{{lbl-end}}} {{{val-start}}}{{{nickname}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Page : {{{lbl-end}}} {{{val-start}}}{{{page}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Register : {{{lbl-end}}} {{{val-start}}}{{{register}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Count : {{{lbl-end}}} {{{val-start}}}{{{count}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render>
    </type>

    <type id="40" 
        name="Get event interest." 
        token="VSCP_TYPE_PROTOCOL_GET_EVENT_INTEREST" >
        <render>
            <vscpworks 
                variables="BASE64:aW5kZXg6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZS52c2NwRGF0YVswXSkgfTsKICAgICAgICAgICAgICAgICAgICBjbGFzc2JpdDk6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZS52c2NwRGF0YVsxXSkgfTsKICAgICAgICAgICAgICAgICAgICBmbGFnMTogZnVuY3Rpb24oKSB7IGlmIChlLnZzY3BEYXRhWzFdICZhbXA7IDgpIHJldHVybiAmcXVvdDstIGFsbCB0eXBlcyZxdW90OyBlbHNlICZxdW90Oy0gb25lIHR5cGUmcXVvdDsgfTsKICAgICAgICAgICAgICAgICAgICBmbGFnMjogZnVuY3Rpb24oKSB7IGlmIChlLnZzY3BEYXRhWzFdICZhbXA7IDE2KSByZXR1cm4gJnF1b3Q7LSBhbGwgdHlwZXMmcXVvdDsgZWxzZSAmcXVvdDstIG9uZSB0eXBlJnF1b3Q7IH07CiAgICAgICAgICAgICAgICAgICAgZmxhZzM6IGZ1bmN0aW9uKCkgeyBpZiAoZS52c2NwRGF0YVsxXSAmYW1wOyAzMikgcmV0dXJuICZxdW90Oy0gYWxsIHR5cGVzJnF1b3Q7IGVsc2UgJnF1b3Q7LSBvbmUgdHlwZSZxdW90OyB9OwogICAgICAgICAgICAgICAgICAgIGNsYXNzMTogZnVuY3Rpb24oKSB7IGlmIChlLnZzY3BEYXRhLmxlbmd0aCA+IDIpIHJldHVybiBlLnZzY3BEYXRhWzJdKSB9OwogICAgICAgICAgICAgICAgICAgIHR5cGUxOiBmdW5jdGlvbigpIHsgaWYgKGUudnNjcERhdGEubGVuZ3RoID4gMykgcmV0dXJuICgoZS52c2NwRGF0YVsxXSAmYW1wOyAxKSo1MTIgKyBlLnZzY3BEYXRhWzNdKSB9OwogICAgICAgICAgICAgICAgICAgIGNsYXNzMjogZnVuY3Rpb24oKSB7IGlmIChlLnZzY3BEYXRhLmxlbmd0aCA+IDQpIHJldHVybiBlLnZzY3BEYXRhWzRdKSB9OwogICAgICAgICAgICAgICAgICAgIHR5cGUyOiBmdW5jdGlvbigpIHsgaWYgKGUudnNjcERhdGEubGVuZ3RoID4gNSkgcmV0dXJuICgoZS52c2NwRGF0YVsxXSAmYW1wOyAyKSo1MTIgKyBlLnZzY3BEYXRhWzVdKSB9OwogICAgICAgICAgICAgICAgICAgIGNsYXNzMzogZnVuY3Rpb24oKSB7IGlmIChlLnZzY3BEYXRhLmxlbmd0aCA+IDYpIHJldHVybiBlLnZzY3BEYXRhWzZdKSB9OwogICAgICAgICAgICAgICAgICAgIHR5cGUzOiBmdW5jdGlvbigpIHsgaWYgKGUudnNjcERhdGEubGVuZ3RoID4gNykgcmV0dXJuICgoZS52c2NwRGF0YVsxXSAmYW1wOyA0KSo1MTIgKyBlLnZzY3BEYXRhWzddKSB9Ow=="
                template="
                    {{{lbl-start}}}Index : {{{lbl-end}}} {{{val-start}}}{{{index}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Class bits : {{{lbl-end}}} {{{val-start}}}{{{classbit9}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Class 1 : {{{lbl-end}}} {{{val-start}}}{{{class1}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Type 1 : {{{lbl-end}}} {{{val-start}}}{{{type1}}}{{{flag1}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Class 2 : {{{lbl-end}}} {{{val-start}}}{{{class2}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Type 2 : {{{lbl-end}}} {{{val-start}}}{{{type2}}}{{{flag2}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Class 3 : {{{lbl-end}}} {{{val-start}}}{{{class3}}}{{{val-end}}}{{{newline}}}
                    {{{lbl-start}}}Type 3 : {{{lbl-end}}} {{{val-start}}}{{{type3}}}{{{flag3}}}{{{val-end}}}{{{newline}}}
                "
            />
        </render> 
    </type>

    <type id="41" 
        name="Get event interest response." 
        token="VSCP_TYPE_PROTOCOL_GET_EVENT_INTEREST_RESPONSE" >
        <render>
            <vscpworks 
                variables=""
                template="No data"
            />
        </render>
    </type>

    <type id="48" 
        name="Activate new image ACK." 
        token="VSCP_TYPE_PROTOCOL_ACTIVATE_NEW_IMAGE_ACK" >
        <render>
            <vscpworks 
                variables=""
                template="No data"
            />
        </render>
    </type>

    <type id="49" 
        name="Activate new image NACK." 
        token="VSCP_TYPE_PROTOCOL_ACTIVATE_NEW_IMAGE_NACK" >
        <render>
            <vscpworks 
                variables=""
                template="No data"
            />
        </render>
    </type>

    <type id="50" 
        name="Block data transfer ACK." 
        token="VSCP_TYPE_PROTOCOL_START_BLOCK_ACK" >
        <render>
            <vscpworks 
                variables=""
                template="No data"
            />
        </render>
    </type>

    <type id="51" 
        name="Block data transfer NACK." 
        token="VSCP_TYPE_PROTOCOL_START_BLOCK_NACK" >
        <render>
            <vscpworks 
                variables=""
                template="No data"
            />
        </render>
    </type>

</class>
